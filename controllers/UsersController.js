/* eslint-disable no-unused-vars */
import sha1 from 'sha1';
import { ObjectID } from 'mongodb';
// eslint-disable-next-line import/no-named-as-default
import dbClient from '../utils/db';
import redisClient from '../utils/redis';

class UsersController {
  static async postNew(req, res) {
    const email = req.body ? req.body.email : null;
    // console.log(email); // debug
    const password = req.body ? req.body.password : null;

    // email is missing, return an error Missing email with a status code 400
    if (!email) {
      res.status(400).json({ error: 'Missing email' });
      return;
    }
    // password is missing, return an error Missing password with a status code 400
    if (!password) {
      res.status(400).json({ error: 'Missing password' });
      return;
    }
    // const user = await (await dbClient.usersCollection()).findOne({ email });
    // email already exists in DB, return an error Already exist with a status code 400
    const users = dbClient.db.collection('users');
    users.findOne({ email }, (err, user) => {
      if (user) {
        res.status(400).json({ error: 'Already exist' });
      } else {
        const hashedPassword = sha1(password);
        users.insertOne(
          { email, password: hashedPassword },
        ).then((result) => {
          res.status(201).json({ id: result.insertedId, email });
        }).catch((error) => console.log(error));
      }
    });
    // password must be stored after being hashed in SHA1
    // const insertionInfo = await (await dbClient.usersCollection())
    //   .insertOne({ email, password: sha1(password) });
    // const userId = insertionInfo.insertedId.toString();
    // return email and the id (auto generated by MongoDB) with a status code 201
    // res.status(201).json({ id: userId, email });
  }

  static async getMe(req, res) {
    // Retrieve the user based on the token:
    // If not found, return an error Unauthorized with a status code 401
    // Otherwise, return the user object (email and id only)

    const token = req.header('X-Token');
    const key = `auth_${token}`;
    const userId = await redisClient.get(key);

    if (userId) {
      const users = dbClient.db.collection('users');
      const idObject = new ObjectID(userId);

      users.findOne({ _id: idObject }, (err, user) => {
        if (user) {
          res.status(200).json({ id: userId, email: user.email });
        } else {
          res.status(401).json({ error: 'Unauthorized' });
        }
      });
    } else {
      res.status(401).json({ error: 'Unauthorized' });
    }
  }

  static async getUser(req, res) {
    const token = req.header('X-Token');
    const key = `auth_${token}`;
    const userId = await redisClient.get(key);
    if (userId) {
      const users = dbClient.db.collection('users');
      const idObject = new ObjectID(userId);
      const user = await users.findOne({ _id: idObject });
      if (!user) {
        return null;
      }
      return user;
    }
    return null;
  }
}

module.exports = UsersController;
